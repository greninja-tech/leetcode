class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, -1));
        return findminimumpathsum(grid, dp, m - 1, n - 1);
    }

    int findminimumpathsum(vector<vector<int>>& grid, vector<vector<int>>& dp, int i, int j) {
        if (i < 0 || j < 0) return 1e9;
        if (i == 0 && j == 0) return grid[0][0];
        if (dp[i][j] != -1) return dp[i][j];

        int left = grid[i][j]+findminimumpathsum(grid, dp, i, j - 1);
        int up =grid[i][j]+findminimumpathsum(grid, dp, i - 1, j);

        int minPath = min(left, up);
        dp[i][j] = (minPath>1e9) ? INT_MAX :minPath;
        return dp[i][j];
    }
};
